install.packages("ggplot2")
install.packages("dplyr")
install.packages("caret")
install.packages("lubridate")
install.packages("yorkr")
install.packages("reshape2")
install.packages("shiny")
install.packages("data.table")
install.packages("knitr")
install.packages("stringr")
install.packages("xtable")
install.packages("plyr")
install.packages("googlevis")
install.packages("googleVis")
install.packages("CBA")
install.packages("cba")
install.packages("rankcluster")
install.packages("Rankcluster")
install.packages("survival")
x<-5
print (x)
x<-10:30
print (x)
5L
5+2
5L+2L
attributes(x)
x<-10:30
attributes(x)
x<-c(0.4,0.6)
x
attributes(x)
x<-c(0.4,0.6,'amol')
x
x<-c(TRUE,FALSE)
type(x)
x<-c(0.4,0.6,'amol')
class(x)
as.numeric(x)
matrix(nrow=2,ncol=3)
dim(m)
m<-matrix(nrow=2,ncol=3)
dim(m)
attributes(m)
attributes(m)$dim
attributes(m)$dim
dim(m)<-c(6,1)
m
x<-1:5
y<-6:10
rbind(x,y)
z<-rbind(x,y)
z
a<-cbind(x,y)
a
x <- factor(c("yes", "yes", "no", "yes", "no"))
x
table(x)
x <- factor(c("yes", "yes", "no", "yes", "no"),levels = c("yes", "no"))
x
table(x)
is.nan('amol')
is.nan(10)
x <- data.frame(foo = 1:4, bar = c(T, T, F, F))
x
x <- 1:3
names(x)
names(x) <- c("New York", "Seattle", "Los Angeles")
list(1,2,3)
x <- list("Los Angeles" = 1, Boston = 2, London = 3)
x
m <- matrix(1:4, nrow = 2, ncol = 2)
m
x <- data.frame(foo = 1:4, bar = c(T, T, F, F))
names(x)
row.names(x)
row.names(x)<-c('a','b','c','d')
x
colnames(m)
colnames(m)<-c('a','b')
rownames(m)<-c('c','d')
m
?read.table()
shiny::runApp('E:/CDAI')
runApp('E:/CDAI')
shiny::runApp('C:/Users/Amol/Desktop/CDAI')
shiny::runApp('C:/Users/Amol/Desktop/CDAI')
runApp('E:/Downloads/CDAI')
runApp('E:/Downloads/CDAI')
runApp('E:/Downloads/CDAI')
runApp('E:/Downloads/CDAI')
runApp('E:/Downloads/CDAI')
shiny::runApp('C:/Users/Amol/Desktop/CDAI')
runApp('C:/Users/Amol/Desktop/CDAI')
runApp('C:/Users/Amol/Desktop/CDAI')
runApp('C:/Users/Amol/Desktop/CDAI')
runApp('C:/Users/Amol/Desktop/CDAI')
runApp('E:/Mini Project/Materials/GooglyPlus')
runApp('E:/Downloads/CDAI')
rm(list=ls())
runApp('E:/Downloads/CDAI')
rm(list=ls())
runApp('E:/Downloads/CDAI')
runApp('E:/Downloads/CDAI')
runApp('E:/Downloads/CDAI')
runApp('E:/Downloads/CDAI')
runApp('E:/Downloads/CDAI')
runApp('E:/Downloads/CDAI')
runApp('E:/Downloads/CDAI')
runApp('E:/Downloads/CDAI')
runApp('E:/Downloads/CDAI')
shiny::runApp('E:/My Movies/CDAI')
shiny::runApp('E:/My Movies/CDAI')
rm(list=ls())
runApp('C:/Users/Amol/Desktop/CDAI')
shiny::runApp('C:/Users/Amol/Desktop/CDAI')
shiny::runApp('C:/Users/Amol/Desktop/CDAI')
rm(list=ls())
library("kernlab")
install.packages("rlist")
library(rlist)
shiny::runApp('C:/Users/Amol/Desktop/Review 2/CDAI')
setwd("E:/Downloads/Compressed/practical-machine-learning-master")
library(caret)
library(randomForest)
set.seed(33833)
df <- read.csv("pml-training.csv", na.strings=c("NA",""))
df <- read.csv("pml-training.csv", na.strings=c("NA",""))
inTrain <- createDataPartition(df$classe, p=0.75, list = FALSE)
train <- df[inTrain,]
test <- df[-inTrain,]
trainRed <- train[, which(as.numeric(colSums(is.na(train)))==0)]
trainRed <- trainRed[,-(1:7)]
end <- ncol(trainRed)
trainRed[,-end] <- data.frame(sapply(trainRed[,-end], as.numeric))
nzv <- nearZeroVar(trainRed[, -end], saveMetrics=TRUE)
trainRed <- trainRed[,!as.logical(nzv$nzv)]
modelFit <- train(classe ~ ., data = trainRed, method="rf",importance=TRUE)
setwd("E:/Downloads/Compressed/New folder")
setwd("E:/Downloads/Compressed/Coursera-PracticalMachineLearning-master")
install.packages("Hmisc")
install.packages("dpParallel")
install.packages("doParallel")
install.packages("randomForest")
library(randomForest)
randomForest()
ls(getNamespace("randomForest"), all.names=TRUE)
setwd("E:/Downloads/Compressed/PracticalMachineLearning_2014-gh-pages")
setwd("E:/Downloads/Compressed/practical-machine-learning-master")
library(caret)
library(randomForest)
set.seed(33833)
df <- read.csv("pml-training.csv", na.strings=c("NA",""))
inTrain <- createDataPartition(df$classe, p=0.75, list = FALSE)
train <- df[inTrain,]
test <- df[-inTrain,]
trainRed <- train[, which(as.numeric(colSums(is.na(train)))==0)]
trainRed <- trainRed[,-(1:7)]
end <- ncol(trainRed)
trainRed[,-end] <- data.frame(sapply(trainRed[,-end], as.numeric))
nzv <- nearZeroVar(trainRed[, -end], saveMetrics=TRUE)
trainRed <- trainRed[,!as.logical(nzv$nzv)]
modelFit <- train(classe ~ ., data = trainRed, method="rf",importance=TRUE)
install.packages("corrplot")
install.packages("kernlab")
install.packages("randomForest")
install.packages("knitr")
install.packages("caret")
install.packages("ggplot2")
View(train)
setwd("E:/Coursera/Data_Science_Certification/datasciencecoursera/8_Practical Machine Learning")
